if(output){#输出结果
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
CI1
paste(CI1)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果
print(paste((1-alpha)*100,"%的置信区间为"))
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果
print(paste((1-alpha)*100,"%的置信区间为",CI))
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果
print(paste((1-alpha)*100,"%的置信区间为[",CI[1],CI[2],"]"))
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
?paste
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果
print(paste0((1-alpha)*100,"%的置信区间为[",CI[1],CI[2],"]"))
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果
print(paste0((1-alpha)*100,"%的置信区间为[",CI[1],",",CI[2],"]"))
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果
print(paste0((1-alpha)*100,"%的置信区间为[",round(CI[1],3),",",round(CI[2],3),"]"))
print(CI)
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果，保留2位有效数字
print(paste0((1-alpha)*100,"%的置信区间为[",round(CI[1],2),",",round(CI[2],2),"]"))
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
options(digits=2)
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果，保留2位有效数字
print(paste0((1-alpha)*100,"%的置信区间为[",round(CI[1],2),",",round(CI[2],2),"]"))
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果，保留2位有效数字
print(paste0((1-alpha)*100,"%的置信区间为[",signif(CI[1],2),",",signif(CI[2],2),"]"))
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,output=TRUE){
n = length(x)
mu = mean(x)
if(sigma==0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(output){#输出结果，保留k位有效数字
k = 7
print(paste0((1-alpha)*100,"%的置信区间为[",signif(CI[1],k),",",signif(CI[2],k),"]"))
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,k=6){
n = length(x)
mu = mean(x)
if(sigma<=0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(K>0){#输出结果，保留k位有效数字
print(paste0((1-alpha)*100,"%的置信区间为[",signif(CI[1],k),",",signif(CI[2],k),"]"))
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
# 单个总体期望的区间估计
meanCI <- function(x,alpha,sigma=0,k=6){
n = length(x)
mu = mean(x)
if(sigma<=0){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差未知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(k>0){#输出结果，保留k位有效数字
print(paste0((1-alpha)*100,"%的置信区间为[",signif(CI[1],k),",",signif(CI[2],k),"]"))
}
return(CI)
}
# 第27题数据
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = meanCI(data1,alpha)
mu=NA
is.na(mu)
# 第27题数据导入
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
CI1 = varCI(data1,alpha)
# 第27题数据导入
data1 = c(249,254,243,268,253,269,287,241,273,
306,303,280,260,256,278,344,304,283,310)
alpha = 0.05
meanCI(data1,alpha)
CI1 = varCI(data1,alpha)
plot(density(height,from = 50,to=85),type="l")
library("dslabs") #事先需要安装该package
attach(heights) #这样可以直接使用height和sex
alpha = 0.05
CI3 = meanCI(height,alpha)
CI4 = varCI(height,alpha)
## 单个总体期望的区间估计
# x为数据
# 1-alpha为置信水平
# sigma为总体标准差，默认sigma=NA为未知标准差的情形
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
meanCI <- function(x,alpha,sigma=NA,k=6){
n = length(x)
mu = mean(x)
if(is.na(sigma)){
#方差未知, 用t分布
len = qt(1-alpha/2,df=n-1)*sd(x)/sqrt(n)
CI = c(mu-len,mu+len)
}else{
#方差已知, 用正态分布
len = qnorm(1-alpha/2)*sigma/sqrt(n)
CI = c(mu-len,mu+len)
}
if(k>0){#输出结果，保留k位有效数字
print(paste0("期望的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
## 单个总体方差的区间估计
# x为数据
# 1-alpha为置信水平
# mu为总体期望，默认mu=NA为未知期望的情形
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
varCI <- function(x,alpha,mu=NA,k=6){
n = length(x)
if(is.na(mu)){
#期望未知, 用chisq(n-1)分布
CI = (n-1)*var(x)*c(1/qchisq(1-alpha/2,df=n-1),1/qchisq(alpha/2,df=n-1))
}else{
#期望已知, 用chisq(n)分布
CI = sum((x-mu)^2)*c(1/qchisq(1-alpha/2,df=n),1/qchisq(alpha/2,df=n))
}
if(k>0){#输出结果，保留k位有效数字
print(paste0("方差的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
plot(density(height,from = 50,to=85),type="l",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,legend=c(2,2))
plot(density(height,from = 50,to=85),type="l",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,y=.1,legend=c("l","l"))
plot(density(height,from = 50,to=85),type="l",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,y=.1,legend=c(2,2))
plot(density(height,from = 50,to=85),type="l",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,y=.1,legend=c("Kernel","Normal"),lty=c(1,1),col=c("blue","red"),lwd=c(2,2))
par(lwd = 2)
plot(density(height,from = 50,to=85),type="l",col="blue",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,y=.1,legend=c("Kernel","Normal"),lty=c(1,1),col=c("blue","red"),lwd=c(2,2))
par(lwd = 2,mar=c(2,2,2,1))
plot(density(height,from = 50,to=85),type="l",col="blue",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,y=.1,legend=c("Kernel","Normal"),lty=c(1,1),col=c("blue","red"),lwd=c(2,2))
par(lwd = 2,mar=c(3,3,3,1))
plot(density(height,from = 50,to=85),type="l",col="blue",xlab="x",main="Kernel vs. normal")
x = seq(50,85,by=0.001)
y = dnorm(x,mean(height),sd(height))
lines(x,y,col="red")
legend(x=50,y=.1,legend=c("Kernel","Normal"),lty=c(1,1),col=c("blue","red"),lwd=c(2,2))
## 两个总体期望差的区间估计（已知方差相同）
# x,y为两个样本数据
# 1-alpha为置信水平
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
meandiffCI <- function(x,y,alpha,k=6){
n = length(x)
m = length(y)
mu1 = mean(x)
mu2 = mean(y)
sw = sqrt((n-1)*var(x)+(m-1)*var(y)/(n+m-2))
CI = mu1-mu2+qt(1-alpha/2,m+n-2)*sw*sqrt(1/n+1/m)*c(-1,1)
if(k>0){#输出结果，保留k位有效数字
print(paste0("期望差的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
M_height = height[sex="Male"] #男生数据
F_height = height[sex="Female"] #女生数据
alpha = 0.05
CI5 = meandiffCI(M_height,F_height,alpha)
mean(M_height)
## 两个总体期望差的区间估计（已知方差相同）
# x,y为两个样本数据
# 1-alpha为置信水平
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
meandiffCI <- function(x,y,alpha,k=6){
n = length(x)
m = length(y)
mu1 = mean(x)
mu2 = mean(y)
sw = sqrt((n-1)*var(x)+(m-1)*var(y)/(n+m-2))
CI = mu1-mu2+qt(1-alpha/2,m+n-2)*sw*sqrt(1/n+1/m)*c(-1,1)
if(k>0){#输出结果，保留k位有效数字
print(paste0("期望差的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
M_height = height[sex=="Male"] #男生数据
F_height = height[sex=="Female"] #女生数据
alpha = 0.05
CI5 = meandiffCI(M_height,F_height,alpha)
library("dslabs") #事先需要安装该package
attach(heights) #这样可以直接使用height和sex
alpha = 0.05
CI3 = meanCI(height,alpha)
CI4 = varCI(height,alpha)
## 两个总体期望差的区间估计（已知方差相同）
# x,y为两个样本数据
# 1-alpha为置信水平
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
meandiffCI <- function(x,y,alpha,k=6){
n = length(x)
m = length(y)
mu1 = mean(x)
mu2 = mean(y)
sw = sqrt((n-1)*var(x)+(m-1)*var(y)/(n+m-2))
CI = mu1-mu2+qt(1-alpha/2,m+n-2)*sw*sqrt(1/n+1/m)*c(-1,1)
if(k>0){#输出结果，保留k位有效数字
print(paste0("期望差的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
M_height = height[sex=="Male"] #男生数据
F_height = height[sex=="Female"] #女生数据
alpha = 0.05
CI5 = meandiffCI(M_height,F_height,alpha)
## 两个总体期望差的区间估计（已知方差相同）
# x,y为两个样本数据
# 1-alpha为置信水平
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
meandiffCI <- function(x,y,alpha,k=6){
n = length(x)
m = length(y)
mu1 = mean(x)
mu2 = mean(y)
sw = sqrt(((n-1)*var(x)+(m-1)*var(y))/(n+m-2))
CI = mu1-mu2+qt(1-alpha/2,m+n-2)*sw*sqrt(1/n+1/m)*c(-1,1)
if(k>0){#输出结果，保留k位有效数字
print(paste0("期望差的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
M_height = height[sex=="Male"] #男生数据
F_height = height[sex=="Female"] #女生数据
alpha = 0.05
CI5 = meandiffCI(M_height,F_height,alpha)
## 两个总体方差比的区间估计（期望未知）
# x,y为两个样本数据
# 1-alpha为置信水平
# k为输出结果的有效数字，如果k=0意味着不输出结果，默认输出k=6位有效数字的结果
vardiffCI <- function(x,y,alpha,k=6){
n = length(x)
m = length(y)
CI = var(x)/var(y)*c(1/qf(1-alpha/2,n-1,m-1),1/qf(alpha/2,n-1,m-1))
if(k>0){#输出结果，保留k位有效数字
print(paste0("期望差的",(1-alpha)*100,"%置信区间为[",signif(CI[1],k),", ",signif(CI[2],k),"]"))
}
return(CI)
}
CI6 = vardiffCI(M_height,F_height,alpha)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
?kable
2^(-9)
0.1^(10)+0.9^(10)
2^(-9)
10/4^3
1-0.15625
knitr::opts_chunk$set(echo = TRUE)
p = seq(0,1,by=0.001)
power = 3*p^2-2*p^3
plot(p,power,type="l")
pchisq(16.82,18)
?t.test
?binom.test
