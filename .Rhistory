qmc[1,1:4]
matix(qmc(1,1:4),4,1)
matrix(qmc(1,1:4),4,1)
matrix(qmc[1,1:4],4,1)
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
u
A = qnorm(u[,1])*sqrt(5)+1
A
gkprior(1,qmc[1,1:4])
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
u
debugSource('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
debugSource('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
debugSource('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
u = qmc[1,1:4]
is.na(u)
matrix(qmc[1,1:4],4,1)
is.na(z)
is.na(rep(3,2))
is.na(rep(3,2))[1]
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
rowMeans(theta2)
colMeans(theta2)
View(theta2)
invsig
stmp==NaN
find(stmp==NA)
?find
is.na(stmp)
sum(is.na(ytmp))
sum(is.na(stmp))
stmp[1]
i=1
theta[i,] = gkprior(1,matrix(qmc[i,1:4],1,4))
ypro = gkmodel(theta[i,],n,qnorm(matrix(qmc[i,-(1:4)],1,n)))
spro = gksummary(ypro)
theta[i,]
spro
ypro
theta[i,]
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
colMeans(theta2)
colMeans(theta1)
?sobol
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
colMeans(theta2)
colMeans(theta1)
colMeans(theta0)
theta0
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
knitr::opts_chunk$set(echo = FALSE)
x = c(315, 108, 102, 31)
p = c(9/16,3/16,3/16,1/16)
chisq.test(x,p=p)
alpha = 0.1
n = 10
s = 1:n
pr = qbeta(alpha,s,n-s+1)
par(mfrow = c(1,2),mar=c(4,4,2,0.5))
plot(s,pr,type="b",ylab=expression(p[alpha](s)), main=expression(alpha==0.1))
abline(h=0.5,col="red")
lb = expression(p[0]==0.5)
text(3,0.55,lb)
alpha = 0.05
pr = qbeta(alpha,s,n-s+1)
plot(s,pr,type="b",ylab=expression(p[alpha](s)), main=expression(alpha==0.05))
abline(h=0.5,col="red")
text(3,0.55,lb)
binom.test(8,10,0.5,alternative = "greater")
x = c(315, 108, 102, 31)
p = c(9/16,3/16,3/16,1/16)
chisq.test(x,p=p)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
myfun = function(x){
#rowSums(x^2)
apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 8
#trueval = d/3
trueval = 0
qmc = as.matrix(sobol(n=N,dim=d),ncol=d)
library("randtoolbox")
myfun = function(x){
#rowSums(x^2)
apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 8
#trueval = d/3
trueval = 0
qmc = as.matrix(sobol(n=N,dim=d),ncol=d)
fsum = cumsum(myfun(qmc))
ns = 1:N
fmean = fsum[ns]/ns
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("QMC: d = ",d)
plot(ns,fmean,xlab="N",ylab="Mean",typ="l",main=tt)
abline(h=trueval,lty=5,col="red")
ns = 2^(0:m)
fmean = fsum[ns]/ns
err = abs(fmean-trueval)
plot(ns,err,xlab="N",ylab="Error",typ="b",log="xy",main=tt)
r = 1
lines(ns[c(3,m)], c(err[3],err[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,err[2],legend = c("QMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
(rowSums(x)>d/2)-0.5
#rowSums(x^2)-d/3
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 2
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 1
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
(rowSums(x)>d/2)-0.5
#rowSums(x^2)-d/3
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 2
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 0.75
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
(rowSums(x)>d/2)-0.5
#rowSums(x^2)-d/3
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 2
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 0.5
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
#(rowSums(x)>d/2)-0.5
rowSums(x^2)-d/3
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 2
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 0.5
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
#(rowSums(x)>d/2)-0.5
rowSums(qnorm(x))
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 2
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 0.5
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
#(rowSums(x)>d/2)-0.5
rowSums(qnorm(x))
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 2
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 1
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
myfun = function(x){
d = ncol(x)
#(rowSums(x)>d/2)-0.5
rowSums(qnorm(x))
#apply(x-0.5,1,prod)
}
m = 16
N = 2^m
d = 8
trueval = 0
R = 100
ns = 2^(0:m)
fmean = matrix(0,m+1,R)
tmp = sobol(N,d)##initialization
for(i in 1:R)
{
rqmc = as.matrix(sobol(N,d,scrambling=1,init=FALSE),ncol=d)
fsum = cumsum(myfun(rqmc))
fmean[,i] = fsum[ns]/ns
}
par(mar=c(4,4,2,1),mfrow=c(2,1))
tt = paste0("RQMC: d = ",d)
plot(ns,rowMeans(fmean),xlab="N",ylab="Mean",typ="b",main=tt)
abline(h=trueval,lty=5,col="red")
rmse = apply(fmean,1,sd)
plot(ns,rmse,xlab="N",ylab="rmse",typ="b",log="xy",main=tt)
r = 1
lines(ns[c(3,m)], c(rmse[3],rmse[3]*(ns[3]/ns[m])^r),col="red",lty=5)
legend(500,rmse[2],legend = c("RQMC errors",paste0("N^{",-r,"}")),lty = c(1,5),
col=c("black","red"),pch=c(1,NA),cex=1.2)
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
colMeans(theta2)
colMeans(theta1)
theta0
source('D:/Dropbox/courses/2018-2019-1Bayesian/slides/gandk.R')
?apply
source('D:/Dropbox/courses/web/academic/gandk2.R')
warnings()
bolgdown::site_serve()
blogdown::site_serve()
blogdown::site_server()
?blogdown
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
?lm
knitr::opts_chunk$set(echo = TRUE)
return = data.frame(
disn = c(0.08088,0.04737,-0.04634,0.16834,-0.09082),
macd = c(-0.01309,0.15958,0.09966,0.03125,0.06206),
schl = c(-0.08463,0.02884,0.00165,0.09571,-0.05723),
hali = c(-0.13373,0.03616,0.07919,0.09227,-0.13242)
)
return
return = data.frame(
disn = c(0.08088,0.04737,-0.04634,0.16834,-0.09082),
macd = c(-0.01309,0.15958,0.09966,0.03125,0.06206),
schl = c(-0.08463,0.02884,0.00165,0.09571,-0.05723),
hali = c(-0.13373,0.03616,0.07919,0.09227,-0.13242)
)
lm.stock = lm(disn~macd+schl+hali,data = return)
return = data.frame(
disn = c(0.08088,0.04737,-0.04634,0.16834,-0.09082),
macd = c(-0.01309,0.15958,0.09966,0.03125,0.06206),
schl = c(-0.08463,0.02884,0.00165,0.09571,-0.05723),
hali = c(-0.13373,0.03616,0.07919,0.09227,-0.13242)
)
lm.stock = lm(disn~macd+schl+hali,data = return)
summary(lm.stock)
return = data.frame(
disn = c(0.08088,0.04737,-0.04634,0.16834,-0.09082),
macd = c(-0.01309,0.15958,0.09966,0.03125,0.06206),
schl = c(-0.08463,0.02884,0.00165,0.09571,-0.05723),
hali = c(-0.13373,0.03616,0.07919,0.09227,-0.13242)
)
lm.stock = lm(disn~macd+schl+hali-1,data = return)
summary(lm.stock)
?kable
plot(bloot)
plot(blood)
blood=data.frame(
x1=c(76.0,91.5,85.5,82.5,79.0,80.5,74.5,79.0,85.0,76.5,82.0,95.0,92.5),
x2=c(50,20,20,30,30,50,60,50,40,55,40,40,20),
y=c(120,141,124,126,117,125,123,125,132,123,132,155,147))
knitr::kable(blood,format="html")
plot(blood)
attach(blood)
n = length(weight)
blood=data.frame(
weight=c(76.0,91.5,85.5,82.5,79.0,80.5,74.5,79.0,85.0,76.5,82.0,95.0,92.5),
age=c(50,20,20,30,30,50,60,50,40,55,40,40,20),
pressure=c(120,141,124,126,117,125,123,125,132,123,132,155,147))
knitr::kable(blood,format="html")
plot(blood)
lm.blood=lm(pressure~weight+age,data=blood)
summary(lm.blood)
attach(blood)
n = length(weight)
X = cbind(rep(1,n),weight,age)
X
attach(blood)
n = length(weight)
X = cbind(constant=rep(1,n),weight,age)
X
attach(blood)
n = length(weight)
X = cbind(constant=rep(1,n),weight,age)
C = slove(t(X)%*%X)
attach(blood)
n = length(weight)
X = cbind(constant=rep(1,n),weight,age)
C = solve(t(X)%*%X)
C
lm.blood$residuals
sqrt(262.719874)
attach(blood)
n = length(weight)
X = cbind(intercept=rep(1,n),weight,age)
C = solve(t(X)%*%X)
SSE = sum(lm.blood$residuals^2) # sum of squared errors
cov = SSE/n*C
knitr::kable(cov,format="html",caption = "Covariance Matrix")
sqrt(222.3014315)
sqrt(288.991861	)
sqrt(0.0307450)
SSE
sqrt(SSE/(n-3))
plot(lm.blood)
n = length(blood$weight)
X = cbind(intercept=rep(1,n),weight=blood$weight,age=blood$age)
C = solve(t(X)%*%X)
SSE = sum(lm.blood$residuals^2) # sum of squared errors
SST = var(blood$pressure)*(n-1)
SSR = SST-SSE
Fstat = SSR/(3-1)/(SSE/(n-3))
cov = SSE/(n-3)*C
knitr::kable(cov,format="html",caption = "Estimated Covariance Matrix")
Fstat
lm.blood$fitted.values
?plot3d
install.packages("rgl")
?plot3d
library(rgl)
?plot3d
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x, y)
plot3d(x, y, z, col = rainbow(1000))
?seq
newdata = data.frame(
age = rep(31,100),
weight = seq(70,100,length.out = 100)
)
CI = predict(lm.blood,newdata,interval = "confidence")
par(mar=c(4,4,2,1))
matplot(newdata$weight,CI,type="l",lty = c(1,5,5),
col=c("blue","red","red"),lwd=2,
xlab="Weight",ylab="Pressure")
legend(2.5,2.1,c("Fitted","Lower limit","Upper limit"),
lty = c(1,5,5),col=c("blue","red","red"))
CI
newdata = data.frame(
age = rep(31,100),
weight = seq(70,100,length.out = 100)
)
CI = predict(lm.blood,newdata,interval = "confidence")
Pred = predict(lm.blood,newdata,interval = "prediction")
par(mar=c(4,4,2,1))
matplot(newdata$weight,cbind(CI,Pred[,-1]),type="l",lty = c(1,5,5,2,2),
col=c("blue","red","red","brown","brown"),lwd=2,
xlab="Weight",ylab="Pressure",main = "Age = 31")
legend(70,160,c("Fitted","Confidence","Prediction"),
lty = c(1,5,2),col=c("blue","red","brown"))
seq(2,3)
seq(2,5)
newdata = data.frame(
weight = rep(85,41),
age = seq(20,60)
)
CI = predict(lm.blood,newdata,interval = "confidence")
Pred = predict(lm.blood,newdata,interval = "prediction")
par(mar=c(4,4,2,1))
matplot(newdata$weight,cbind(CI,Pred[,-1]),type="l",lty = c(1,5,5,2,2),
col=c("blue","red","red","brown","brown"),lwd=2,
xlab="Weight",ylab="Pressure",main = "Weight = 85")
legend(70,160,c("Fitted","Confidence","Prediction"),
lty = c(1,5,2),col=c("blue","red","brown"))
newdata = data.frame(
weight = rep(85,41),
age = seq(20,60)
)
CI = predict(lm.blood,newdata,interval = "confidence")
Pred = predict(lm.blood,newdata,interval = "prediction")
par(mar=c(4,4,2,1))
matplot(newdata$age,cbind(CI,Pred[,-1]),type="l",lty = c(1,5,5,2,2),
col=c("blue","red","red","brown","brown"),lwd=2,
xlab="Weight",ylab="Pressure",main = "Weight = 85")
legend(70,160,c("Fitted","Confidence","Prediction"),
lty = c(1,5,2),col=c("blue","red","brown"))
blogdown::site_server()
blogdown::server_site()
blogdown::serve_site()
remove(list=ls())
knitr::opts_chunk$set(echo = TRUE)
rod = read.table("rod.txt",col.names = c("id","rough_weight","finished_weight"))
knitr::kable(rod,"html",caption = "rough weight vs. finished weight")
attach(rod)
par(mar=c(4,4,1,0.5))
plot(rough_weight,finished_weight,type="p",pch=16,
xlab = "Rough Weight",ylab = "Finished Weight")
lm.rod = lm(finished_weight~rough_weight)
abline(coef(lm.rod),col="blue")
summary(lm.rod) #output the results
